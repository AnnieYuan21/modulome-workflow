process {
    executor = 'local'
    withLabel: small {
        cpus = { check_max( 1 * task.attempt, 'cpus' ) }
        memory = { check_max( 500.MB * task.attempt, 'memory' ) }
    }
    withLabel: medium {
        cpus = { check_max( 4 * task.attempt, 'cpus' ) }
        memory = { check_max( 4.GB * task.attempt, 'memory' ) }
    }
    withLabel: large {
        cpus = { check_max( 8 * task.attempt, 'cpus' ) }
        memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    }

    withLabel: stage {
        storeDir = "stage/${params.organism}"
    }

    withLabel: index {
        storeDir = "bt_index/${params.organism}"
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit. Borrowed from the nf-core/rnaseq config page
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
