manifest {
    author = 'Anand Sastry'
    name = 'nextflow-bacterial-rnaseq'
    homePage = ''
    description = 'Nextflow pipeline for processing public microbial RNA-seq data'
    mainScript = 'main.nf'
    nextflowVersion = '>=20.01.0'
    version = '0.1'
}

params {
    organism = "None"
    metadata = "None"
    sequence_dir = "None"
    force = false
    help = false
    trace_dir = './trace/'
    multiqc_config = 'conf/multiqc_config.yaml'
}


process {

  cpus = { check_max( 1 * task.attempt, 'cpus' ) }
  memory = { check_max( 6.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'
}

includeConfig 'conf/user.config'
includeConfig 'conf/local.config'
includeConfig 'conf/docker.config'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash','-euo','pipefail']

// Enable process tracking
timeline {
    enabled = true
    file = "${params.trace_dir}/timeline.html"
}

report {
    enabled = true
    file = "${params.trace_dir}/report.html"
}

trace {
    enabled = true
    file = "${params.trace_dir}/trace.txt"
}

dag {
    enabled = true
    file = "${params.trace_dir}/dag.dot"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit. Borrowed from the nf-core/rnaseq config page
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
